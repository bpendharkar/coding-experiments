#given 2 nodes in tree , find the common ancestor
#start with root , check left and right'
#if left 
#recurse left tree  and right tree 
#need to have a util
     5
  4    6
 2 1  8  9
     7
	
#no access to root node 
have access to parent node
# if n1.parent == n2
	return n2 


def findcommonancestor(root, n1, n2):
	if root is None:
		return None
	
	if n1 is None or n2 is None:
		return None
	
	if root == n1 or root == n2:
		return root
	
	
	leftResponse = findcommonancestor(root.left, n1, n2)
	rightResponse = findcommonancestor(root.right, n1, n2)
	
	if leftResponse != None and rightResponse != None:
		return root
	
	if leftResponse != None:
		return root.left

	if rightResponse != None:
		return root.right
	
	return None
	

def onceInteger(arr):
	add it to a hash table

	
	
# foobarbaz ,  barbazfoo
# aaaaaabbbbb, bbaaaaaabbb

def checkifstringsrotated(s1, s2):
	if s1 is None and s2 is None:
		return True
	
	#check for length
	count = 0
	#brute force
	for i in xrange(len(s2)):
		y = 0
		x = i
		count = 0
		while y < len(s1) and s1[y] == s2[x]:
			y += 1
			count +=1
			if y == len(s1):
				y = 0
		
		if count == len(s1):
			return True
		
		
	return False
	
	
	#optimal 
	newstr = s2 + s2
	#barbazfoobarbazfoo
	

#two sorted lists, return union and intersection


def setOperations(l1, l2):
	
	#union 
	i = 0 
	j = 0
	union = list()
	while i < len(l1) and j < len(l2) :
		if l1[i] == l2[j]:
			union.append(l1[i])
			i +=1
			j +=1
		elif l1[i] < l2[j]:
			union.append(l1[i])
			i +=1
		else:
			union.append(l2[j])
			j +=1
	
	while i < len(l1):
		union.append(l1[i])
		i +=1
	
	while j < len(l2):
		union.append(l2[j])
		j +=1
	
		
#find pyth triplets in an array 
#9 17 24 25 3 18 5 16 4 10 6
# sort array  (n log n )
 3 4 5 6 9 10 16 17 18 24 25
			
				
				
		
		
		
		
Amazon : 
	Alex: Consumer Engg Group
	Mobile shopping, personalization and recommendation services, app navigation team , building application for tv platform, 
	
	
	
	

def printFactors(n, rootNumber, lst, someset):
	
	if n < 2:
		return
	
	s = int(math.sqrt(n))
	for x in range(1, s + 1 , 1):
		if x == 1 :
		  if rootNumber:
		    s = "" + "1 * " + str(n)
		    print(s)
		else:
			if n%x == 0 :
			  q = int(n/x)
			  if x < q:
			    s = str(x)  + " * " + str(q)
			    if lst is not None and len(lst) != 0:
			      s = lst + " * " + s
			    print(s)
	  		  
			    if x < q : #and q not in someset:
				    s = str(x)
				    #someset.add(q)
				    if lst is not None and len(lst) != 0:
				      s = lst + " * " + s
				    printFactors(q, False, s, someset)
				  
				 
				    
          
  
printFactorsMain(24)


	



	
	
	
	
	